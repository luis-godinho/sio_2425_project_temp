#!/usr/bin/python3

import argparse
import os

from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization

def generate_rsa_key_pair(password, file_path):
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )
    public_key = private_key.public_key()

    encrypted_private_key = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format= serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.BestAvailableEncryption(password.encode())
    )

    with open(file_path, 'wb') as file:
        file.write(encrypted_private_key)
        file.write(public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate Key Pair")
    parser.add_argument("password", type=str, help="Password to encrypt the private key")
    parser.add_argument("credentials_file", type=str, help="Path to save the credentials file (private and public key)")

    args = parser.parse_args()
    password = args.password
    credentials_file = args.credentials_file

    generate_rsa_key_pair(password, credentials_file)

    print(f"Credentials file saved at {credentials_file}")
